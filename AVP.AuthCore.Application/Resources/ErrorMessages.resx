<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="error.registration_failed" xml:space="preserve">
    <value>User registration failed</value>
    <comment>Used when user registration process fails</comment>
  </data>
  <data name="error.invalid_access_token" xml:space="preserve">
    <value>Access token is invalid or has expired</value>
    <comment>Used when JWT token validation fails</comment>
  </data>
  <data name="error.invalid_credentials" xml:space="preserve">
    <value>Invalid username or password</value>
    <comment>Used for failed login attempts</comment>
  </data>
  <data name="error.refresh_token_expired" xml:space="preserve">
    <value>Refresh token has expired</value>
    <comment>Used when refresh token lifetime has ended</comment>
  </data>
  <data name="error.refresh_token_not_found" xml:space="preserve">
    <value>Refresh token not found</value>
    <comment>Used when refresh token doesn't exist in the database</comment>
  </data>
  <data name="error.refresh_token_already_revoked" xml:space="preserve">
    <value>Refresh token has already been revoked</value>
    <comment>Used when attempting to use a revoked refresh token</comment>
  </data>
  <data name="error.refresh_token_invalid" xml:space="preserve">
    <value>Invalid refresh token</value>
    <comment>Used when refresh token is malformed or invalid</comment>
  </data>
  <data name="error.session_expired" xml:space="preserve">
    <value>User session has expired</value>
    <comment>Used when user session is no longer valid</comment>
  </data>
  <data name="error.concurrent_login" xml:space="preserve">
    <value>Concurrent login detected</value>
    <comment>Used when multiple login attempts are detected</comment>
  </data>
  <data name="error.user_not_found" xml:space="preserve">
    <value>User not found</value>
    <comment>Used when user doesn't exist in the database</comment>
  </data>
  <data name="error.user_already_exists" xml:space="preserve">
    <value>User already exists</value>
    <comment>Used when attempting to create a duplicate user</comment>
  </data>
  <data name="error.user_locked" xml:space="preserve">
    <value>User account is locked</value>
    <comment>Used when account is temporarily locked due to failed attempts</comment>
  </data>
  <data name="error.user_disabled" xml:space="preserve">
    <value>User account has been disabled</value>
    <comment>Used when account has been administratively disabled</comment>
  </data>
  <data name="error.email_not_confirmed" xml:space="preserve">
    <value>Email address has not been confirmed</value>
    <comment>Used when email verification is required</comment>
  </data>
  <data name="error.email_already_confirmed" xml:space="preserve">
    <value>Email address has already been confirmed</value>
    <comment>Used when attempting to confirm an already verified email</comment>
  </data>
  <data name="error.invalid_email_confirmation_token" xml:space="preserve">
    <value>Email confirmation token is invalid or has expired</value>
    <comment>Used when email confirmation token is not valid</comment>
  </data>
  <data name="error.invalid_password_reset_token" xml:space="preserve">
    <value>Password reset token is invalid or has expired</value>
    <comment>Used when password reset token is not valid</comment>
  </data>
  <data name="error.invalid_email" xml:space="preserve">
    <value>Invalid email format</value>
    <comment>Used when email format is incorrect</comment>
  </data>
  <data name="error.invalid_username" xml:space="preserve">
    <value>Invalid username format</value>
    <comment>Used when username doesn't meet requirements</comment>
  </data>
  <data name="error.password_requires_digit" xml:space="preserve">
    <value>Password must contain at least one digit</value>
    <comment>Used when password lacks numeric characters</comment>
  </data>
  <data name="error.password_requires_non_alphanumeric" xml:space="preserve">
    <value>Password must contain at least one special character</value>
    <comment>Used when password lacks special characters</comment>
  </data>
  <data name="error.password_requires_upper" xml:space="preserve">
    <value>Password must contain at least one uppercase letter</value>
    <comment>Used when password lacks uppercase characters</comment>
  </data>
  <data name="error.password_requires_lower" xml:space="preserve">
    <value>Password must contain at least one lowercase letter</value>
    <comment>Used when password lacks lowercase characters</comment>
  </data>
  <data name="error.password_too_short" xml:space="preserve">
    <value>Password must be at least {0} characters long</value>
    <comment>Used when password is too short</comment>
  </data>
  <data name="error.password_requires_unique_chars" xml:space="preserve">
    <value>Password must contain at least {0} unique characters</value>
    <comment>Used when password lacks character variety</comment>
  </data>
  <data name="error.password_contains_personal_data" xml:space="preserve">
    <value>Password cannot contain personal information</value>
    <comment>Used when password contains username or email</comment>
  </data>
  <data name="error.role_not_found" xml:space="preserve">
    <value>Role not found</value>
    <comment>Used when role doesn't exist</comment>
  </data>
  <data name="error.user_already_in_role" xml:space="preserve">
    <value>User is already in this role</value>
    <comment>Used when adding duplicate role to user</comment>
  </data>
  <data name="error.user_not_in_role" xml:space="preserve">
    <value>User is not in this role</value>
    <comment>Used when removing non-existent role from user</comment>
  </data>
  <data name="error.default_role_not_found" xml:space="preserve">
    <value>Default role not found</value>
    <comment>Used when default role is missing</comment>
  </data>
  <data name="error.external_authentication_error" xml:space="preserve">
    <value>External authentication error occurred</value>
    <comment>Used when external auth provider fails</comment>
  </data>
  <data name="error.external_provider_not_found" xml:space="preserve">
    <value>External authentication provider not found</value>
    <comment>Used when external auth provider is not configured</comment>
  </data>
  <data name="error.external_user_already_associated" xml:space="preserve">
    <value>External user is already associated with an account</value>
    <comment>Used when linking duplicate external accounts</comment>
  </data>
  <data name="error.validation_failed" xml:space="preserve">
    <value>Validation failed</value>
    <comment>Used for general validation failures</comment>
  </data>
  <data name="error.invalid_request" xml:space="preserve">
    <value>Invalid request</value>
    <comment>Used for malformed requests</comment>
  </data>
  <data name="error.invalid_operation" xml:space="preserve">
    <value>Invalid operation</value>
    <comment>Used for operations that cannot be performed</comment>
  </data>
  <data name="error.database_error" xml:space="preserve">
    <value>Database operation failed</value>
    <comment>Used for database-related errors</comment>
  </data>
  <data name="error.communication_error" xml:space="preserve">
    <value>Communication error occurred</value>
    <comment>Used for network/communication failures</comment>
  </data>
  <data name="error.configuration_error" xml:space="preserve">
    <value>Configuration error occurred</value>
    <comment>Used for system configuration issues</comment>
  </data>
  <data name="error.too_many_requests" xml:space="preserve">
    <value>Too many requests</value>
    <comment>Used when rate limit is exceeded</comment>
  </data>
  <data name="error.too_many_failed_attempts" xml:space="preserve">
    <value>Too many failed attempts</value>
    <comment>Used when maximum retry count is exceeded</comment>
  </data>
  <data name="error.two_factor_required" xml:space="preserve">
    <value>Two-factor authentication is required</value>
    <comment>Used when 2FA is mandatory</comment>
  </data>
  <data name="error.invalid_two_factor_code" xml:space="preserve">
    <value>Invalid two-factor authentication code</value>
    <comment>Used when 2FA code is incorrect</comment>
  </data>
  <data name="error.two_factor_already_enabled" xml:space="preserve">
    <value>Two-factor authentication is already enabled</value>
    <comment>Used when enabling already active 2FA</comment>
  </data>
  <data name="error.two_factor_not_enabled" xml:space="preserve">
    <value>Two-factor authentication is not enabled</value>
    <comment>Used when 2FA is required but not setup</comment>
  </data>
  <data name="error.invalid_recovery_code" xml:space="preserve">
    <value>Invalid recovery code</value>
    <comment>Used when 2FA recovery code is invalid</comment>
  </data>
</root>